
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int size = intervals.size();
        if (size == 0){return {};}
        else if (size == 1){return {intervals[0]};}
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        int fir = intervals[0][0];
        int sec = intervals[0][1];
        res.push_back({fir,sec});
        int ptr = 0;
        for (int i = 1;i < size; i++){
            if (intervals[i][0] <= sec){
                if (intervals[i][1] > sec){
                res[ptr][1] = intervals[i][1];
                sec = intervals[i][1];
                }
                if (intervals[i][0] < fir){
                    fir = intervals[i][0];
                    res[ptr][0] = fir;
                }
            }
            else{
                res.push_back(intervals[i]);
                fir = intervals[i][0];
                sec = intervals[i][1];
                ptr += 1;
            }
        }
        return res;
    }
};
//improved version
 vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int size = intervals.size();
        if (size == 0){return {};}
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        for (int i = 0;i < size; ++i){
            int fir = intervals[i][0];
            int sec = intervals[i][1];
            if (res.empty() || res.back()[1] < fir){
                res.push_back({fir,sec});
            }
            else{
                res.back()[1] = max(sec, res.back()[1]);
            }
            
        }
        return res;
    }
