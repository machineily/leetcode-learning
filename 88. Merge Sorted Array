// easiest version
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for (int i = m; i < m + n; i++){
            nums1[i] = nums2[i - m];
        }
        sort(nums1.begin(), nums1.end());
    }
// modified version of using an additional vector
 void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> temp = nums1;
        int p1 = 0, p2 = 0;
        for (int i = 0; i < m + n; i++){
            if (p1 < m && p2 < n){
                if (temp [p1] >= nums2[p2]){
                    nums1[i] = nums2[p2];
                    p2 ++;
                }
                else{
                    nums1[i] = temp[p1];
                    p1 ++;
                }
            }
            else if (p1 < m){
                nums1[i] = temp[p1];
                p1 ++;
            }
            else{
                nums1[i] = nums2[p2];
                p2 ++;
            }
        }
    }
    
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> temp = nums1;
        int p1 = m - 1, p2 = n - 1;
        for (int i = m + n - 1; i >= 0; i--){
            if (p1 >= 0  && p2 >= 0){
                if (temp [p1] >= nums2[p2]){
                    nums1[i] = temp[p1];
                    p1 --;
                }
                else{
                    nums1[i] = nums2[p2];
                    p2 --;
                }
            }
            else if (p1 >= 0){
                nums1[i] = temp[p1];
                p1 --;
            }
            else{
                nums1[i] = nums2[p2];
                p2 --;
            }
        }
    }
